// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: game_history.sql

package queries

import (
	"context"
	"time"
)

const createGame = `-- name: CreateGame :exec
INSERT INTO games (
    player1_id, player2_id, player1_rank_change, 
    player2_rank_change, created_at, finished_at
) VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateGameParams struct {
	Player1ID         int64     `json:"player1Id"`
	Player2ID         int64     `json:"player2Id"`
	Player1RankChange int64     `json:"player1RankChange"`
	Player2RankChange int64     `json:"player2RankChange"`
	CreatedAt         time.Time `json:"createdAt"`
	FinishedAt        time.Time `json:"finishedAt"`
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) error {
	_, err := q.db.Exec(ctx, createGame,
		arg.Player1ID,
		arg.Player2ID,
		arg.Player1RankChange,
		arg.Player2RankChange,
		arg.CreatedAt,
		arg.FinishedAt,
	)
	return err
}

const getGameById = `-- name: GetGameById :one
SELECT id, player1_id, player2_id, player1_rank_change, player2_rank_change, created_at, finished_at
FROM games
WHERE id = $1
`

func (q *Queries) GetGameById(ctx context.Context, id int64) (Game, error) {
	row := q.db.QueryRow(ctx, getGameById, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Player1ID,
		&i.Player2ID,
		&i.Player1RankChange,
		&i.Player2RankChange,
		&i.CreatedAt,
		&i.FinishedAt,
	)
	return i, err
}

const getUserGameHistoryPaged = `-- name: GetUserGameHistoryPaged :many
SELECT id, player1_id, player2_id, player1_rank_change, player2_rank_change, created_at, finished_at
FROM games
WHERE player1_id = $1 OR player2_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserGameHistoryPagedParams struct {
	Player1ID int64 `json:"player1Id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetUserGameHistoryPaged(ctx context.Context, arg GetUserGameHistoryPagedParams) ([]Game, error) {
	rows, err := q.db.Query(ctx, getUserGameHistoryPaged, arg.Player1ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Player1ID,
			&i.Player2ID,
			&i.Player1RankChange,
			&i.Player2RankChange,
			&i.CreatedAt,
			&i.FinishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
