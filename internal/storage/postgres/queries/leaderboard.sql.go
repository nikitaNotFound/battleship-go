// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: leaderboard.sql

package queries

import (
	"context"
)

const getLeaderboard = `-- name: GetLeaderboard :many
SELECT id, username, rank
FROM users
ORDER BY rank DESC
LIMIT $1 OFFSET $2
`

type GetLeaderboardParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetLeaderboardRow struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
	Rank     int64  `json:"rank"`
}

func (q *Queries) GetLeaderboard(ctx context.Context, arg GetLeaderboardParams) ([]GetLeaderboardRow, error) {
	rows, err := q.db.Query(ctx, getLeaderboard, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeaderboardRow
	for rows.Next() {
		var i GetLeaderboardRow
		if err := rows.Scan(&i.ID, &i.Username, &i.Rank); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
